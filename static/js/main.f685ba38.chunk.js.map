{"version":3,"sources":["Editor.js","View.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","id","className","rows","onInput","handle","defaultValue","workArea","View","html","marked","parse","toMark","ready","App","useState","editorVal","edit","event","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","words","colors","undefined","visible","con","letterCount","setAttribute","setInterval","innerHTML","substring","window","consoleText"],"mappings":"mOAcgBA,MAZhB,SAAiBC,GAEb,OACA,qBAAKC,GAAG,SAASC,UAAU,QAA3B,SACI,mCACA,0BAAUA,UAAU,eAAeC,KAAK,KAAKC,QAASJ,EAAMK,OAAQC,aAAcN,EAAMO,gB,eCSjFC,MAbf,SAAeR,GACX,IAAMS,EAAOC,SAAOC,MAAMX,EAAMY,QAC1BC,EAAQF,YAAMF,GAEpB,OAEQ,qBAAKR,GAAG,UAAUC,UAAU,QAA5B,SACCW,KCyDEC,MAlBf,WAEE,MAAyBC,mBA9CV,0pCA8Cf,mBAAOC,EAAP,KAAiBC,EAAjB,KAKA,OACE,qBAAKf,UAAU,gBAAf,SACI,sBAAKD,GAAG,OAAOC,UAAU,MAAzB,UACA,cAAC,EAAD,CAAQG,OAPZ,SAA4Ba,GACxBD,EAAKC,EAAMC,OAAOC,QAMkBb,SAAUS,IAE9C,cAAC,EAAD,CAAMJ,OAAQI,UCjDPK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAK1B,SAAqBC,EAAOlC,EAAImC,QACfC,IAAXD,IAAsBA,EAAS,CAAC,SAEpC,IAAIE,GAAU,EACVC,EAAMN,SAASC,eAAe,WAC9BM,EAAc,EAGdrB,EAASc,SAASC,eAAejC,GACrCkB,EAAOsB,aAAa,QAAS,SAAWL,EAAO,IA2B3CM,aAAY,WACVvB,EAAOwB,UAAYR,EAAM,GAAGS,UAAU,EAAGJ,GACzCA,GAhCE,IAiCF,KAUNK,OAAOH,aAAY,YACD,IAAZJ,GACFC,EAAIrC,UAAY,4BAChBoC,GAAU,IAGVC,EAAIrC,UAAY,qBAEhBoC,GAAU,KAEX,KA7DLQ,CAAY,CAAC,sBAAuB,OAAO,CAAC,SAAS,QAAQ,cAmE7DzB,M","file":"static/js/main.f685ba38.chunk.js","sourcesContent":["\r\n\r\nfunction Editor (props){\r\n    \r\n    return(\r\n    <div id='editor' className=\"col-6\">\r\n        <>\r\n        <textarea className=\"form-control\" rows='10' onInput={props.handle} defaultValue={props.workArea} />   \r\n        </>\r\n </div>\r\n    )\r\n}\r\n\r\n\r\n export default Editor;","    import { marked } from 'marked';\r\n    import parse from \"html-react-parser\";\r\n\r\nfunction View (props){\r\n    const html = marked.parse(props.toMark);\r\n    const ready = parse(html);\r\n    \r\n    return(\r\n     \r\n            <div id='preview' className='col-6'>\r\n            {ready}\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nexport default View","import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Editor from './Editor.js';\r\nimport {useState} from 'react';\r\nimport View from './View';\r\nconst placeholder = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`;\r\nfunction App() {\r\n  \r\n  const [editorVal,edit] = useState(placeholder);\r\n    function handleEditorChange(event){\r\n        edit(event.target.value)\r\n    }\r\n    \r\n  return (\r\n    <div className=\"App container\">\r\n        <div id='main' className='row'>\r\n        <Editor handle={handleEditorChange} workArea={editorVal} />\r\n        \r\n        <View toMark={editorVal} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nconsoleText(['MarkDown Previewer'], 'text',['tomato','green','lightblue']);\r\n\r\nfunction consoleText(words, id, colors) {\r\n  if (colors === undefined) colors = ['#fff'];\r\n\r\n  var visible = true;\r\n  var con = document.getElementById('console');\r\n  var letterCount = 1;\r\n  var x = 1;\r\n  //var waiting = false;\r\n  var target = document.getElementById(id)\r\n  target.setAttribute('style', 'color:' + colors[0])\r\n  \r\n\r\n\r\n  // // // // window.setInterval(function() {\r\n  // // // //   if (letterCount === 0 && waiting === false) {\r\n  // // // //     waiting = true;\r\n  // // // //     target.innerHTML = words[0].substring(0, letterCount)\r\n  // // // //     window.setTimeout(function() {\r\n  // // // //       var usedColor = colors.shift();\r\n  // // // //       colors.push(usedColor);\r\n  // // // //       var usedWord = words.shift();\r\n  // // // //       words.push(usedWord);\r\n  // // // //       x = 1;\r\n  // // // //       target.setAttribute('style', 'color:' + colors[0])\r\n  // // // //       letterCount += x;\r\n  // // // //       waiting = false;\r\n  // // // //     }, 1000)\r\n\r\n  // // // //   } else if (letterCount === words[0].length + 1 && waiting === false) {\r\n  // // // //     waiting = true;\r\n  // // // //     window.setTimeout(function() {\r\n  // // // //       x = -1;\r\n  // // // //       letterCount += x;\r\n  // // // //       waiting = false;\r\n  // // // //     }, 1000)\r\n  // // // //   } else if (waiting === false) {\r\n      setInterval(function(){\r\n        target.innerHTML = words[0].substring(0, letterCount);\r\n        letterCount += x;\r\n      },200)\r\n   \r\n    //}\r\n // }, 120)\r\n\r\n\r\n\r\n\r\n\r\n\r\n  window.setInterval(function() {\r\n    if (visible === true) {\r\n      con.className = 'console-underscore hidden'\r\n      visible = false;\r\n\r\n    } else {\r\n      con.className = 'console-underscore'\r\n\r\n      visible = true;\r\n    }\r\n  }, 200)\r\n}\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}